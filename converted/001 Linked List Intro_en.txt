Welcome to Link lists.
This will be our first data structure.
And to explain it, I'm going to start by bringing up a list.
This is just the normal list that is built into Python, and then I'll go through and change this step
by step to turn this into a link list to highlight the differences between the two.
So the first difference is that a link list does not have indexes, so I'll remove the indexes here.
The next thing is that a list is in a contiguous place in memory.
These are all right next to each other in memory with a link list.
All of the nodes are going to be spread all over the place.
Now, another thing that I like to do when I move to a different data structure is I like to change
the color and the shape so we can keep these separated in our mind.
So I'm going to change this from these being green squares, and I'm going to change them to purple
circles.
So also with a link list, we have a variable called head, and it points to the first node in the list.
Then we're also going to have tail point to the last item, and then each node points to the next to
the next to the next.
And the last one is just going to point to none.
So to emphasize that these are going to be spread out in different places in memory, I'm going to bring
up a memory space and the link list is going to look more like this.
But because one points to the next, to the next to the next, you're able to find all of your nodes
without losing any data that is as opposed to a list which is going to look something like this.
And because these are all in a contiguous place in memory, this is why we can have indexes and access
those indexes O of one, because we can map each one of these indexes to a specific address in memory.
All right.
That is our quick overview of linked lists and how they compare.
To Lists.
