So now we're going to code depth first search in order, so we'll bring up our tree and our calls stack
and we'll start writing our method depth first search in order.
And we'll create our results list like that.
So now I'm going to bring in the traverse function that we used for depth, first search preorder and
that one we appended the value to the list, then we went left and then we went right in post order.
We went left and then right and then wrote the value for an order, we're going to go left, we're going
to write the value, then we're going to go right.
So once again, we have the exact same code just in a different order, so I'm going to move this up
like this and we're going to call Traverse on the route.
And that is going to add an instance of traverse with the 47 Noad to the call stack.
And the first thing we're going to do is go left, and that adds the 21 to the call stack.
And now the first thing that instance of Traverse is going to do is go left and that's going to add
the 18 to the coal stack and the 18 will try to go left and there's nothing there.
And then it will write its value to the results list like this.
Then it will try to go right.
And there's nothing on the rights that will pop that from the coal stack.
Now, the twenty one is at the top of the coal stack.
Again, it has already gone left.
Now it will write its value to the results list like this.
And then the twenty one is going to go to the right and so we'll add the 27 to the call stack like that,
first thing the 27 will do is look to the left and there's nothing there.
And then we'll right its value to the results list like this.
Then it will look to the right.
And now that one is done and we can pop that from the call stack.
Now the twenty one is at the top of the call stack again.
It has already gone left.
It has written its value to the list and it has gone right.
So now we can remove that from the call stack.
The 47 now is back on top of the call stack, it has gone left and now it can write its value to the
results list like that, and then it can go to the right.
So we'll add the 76 to the call stack.
It will go left to the 52, the 52 will look left, it will append its value to the results list and
then it's going to look to the right.
There is nothing on the right.
So we can remove the 52 from the call stack.
Now, the 76 has already gone left.
Now it can append its value.
To the results list like that.
And then it will look to the right.
We'll add the 82 to the call stack like this, it will look to the left who append its value to the
results list.
It will look to the right.
And now we can pop that from the call stack, so with the 76, we've already gone left and appended
its value and gone right.
So now we can remove that.
And the same is true for the 47 has gone left.
We've added its value to the results list and it has gone right.
And we can remove that from the call stack.
And that is the original function call where we call traverse on the route.
And now we just need to return the results list like that.
So now let's look at this in with the rest of our code, and that's our entire depth first search and
order method and we'll look at this in a moment, NPR's code.
When we do, we'll create this same tree that we've been using and we will expect this list to be returned.
All right, so let's flip over to VSG code so there is our depth first search in order method, and
I'm going to scroll up here.
And this is going to create our binary search tree that we've been looking at and then down here will
run depth first search in order on that tree and print out the results and we'll expect to see this
list returned.
OK, so I'm going to run this.
And that returns our list in order.
All right, and that is our method for depth, first search in order.
