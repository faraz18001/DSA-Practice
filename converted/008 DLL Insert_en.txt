Now let's do our insert method with insert.
We are going to insert at a particular index a new node with a particular value.
So if you want to code this, go ahead and pause it here.
Otherwise I will get into the steps for coding this.
All right.
Here is our doubly linked list and we're going to create a new node.
And when we insert this, obviously, we can't have an index less than zero.
We can't have an index that is greater than the length.
So we'll say if the index is less than zero or the index is greater than the length.
We're going to return false.
We could also insert this at the index of zero.
If it's at the index of zero, we'll just return self dot prepend and pass that the value and that will
put that on that end of the link list.
And then also on the other end.
If the index is equal to the length, we'll return self dot append and pass that the value.
So let's take a look at all three of these if statements like that.
And now let's look at adding this somewhere in the middle.
In order to do this, we'll need a couple of variables.
We'll create one called after that points to the node.
That will be after this one, after we insert it.
And then before these will go before and after the new node, after it is inserted.
Now let's create all three of these first.
The node.
Then we'll create our before variable before equals self get at index minus one and then after.
We don't want to use the JIT method here because we can say after equals before next.
The git method is o of n, it has to iterate through the link list.
Whereas if you do it like this, it's o of one.
So let's add these three in with the rest of our code like this.
And we'll bring back our doubly linked list.
And I'm just going to take this and spread this apart.
So we have room for our new node to go in there.
And what we're going to need to do is redirect these four arrows.
And when we're done, we want them to all look like this.
So let's put this back and we'll start with the two arrows that are on the new node.
We'll say new node previous equals before that is to say the previous arrow on the new node is going
to point at the same node that before is pointing at.
Like this.
Then we'll say Nuno next equals after the next arrow is going to now point to the node that after is
pointing to like this.
Then we'll say before dot next equals new node.
And then after dot previous.
Equals new node.
And that.
Adds the new note into the list.
So these four lines of code redirected these four arrows.
Now let's look at this in with the rest of our code like this.
Then we just need to increase the length by one.
And then we'll return.
True.
So that is our insert method.
We'll look at this in a moment.
And when we do, we'll create this doubly linked list with one and three will print that out.
And then we'll run an insert method to insert at the index of one a node with the value of two.
And then we'll print it out again and it should print out one, two, three.
So let's flip over to VTS code.
There is our insert method there.
And I'm going to scroll up.
And this creates our doubly linked list with values of one and three.
And then with this line, we will print that out.
So let's run this.
And that has printed out one and three.
And then between these two, I'm going to paste this line of code, which is going to insert at the
index of one a node with the value of two.
And then when we print this out here, we should get one, two, three.
So I'll run this.
And that has printed out one, two, three.
All right.
That is our method for insert.
