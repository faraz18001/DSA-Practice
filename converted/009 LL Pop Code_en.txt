Now let's code the pop method.
So we'll start by just saying Pop, we don't pass any arguments.
And remember, we had three different scenarios to code for.
I tend to start with the one where we don't have any items and there are a few ways to test for this.
You could say if head is none, tail is none.
I'm going to in this one say if the length is zero.
Then we'll return none.
So the next situation we're going to code for is if we have two or more items in the linked list.
And as we discussed in the last video, we're going to have two variables that are going to be temp
and pre.
Let's create those.
We'll say temp equals self head and pre equals self head.
And then we'll walk through this with a while loop.
And we're saying while temp.
Dot next.
In other words, while temp connects is true, if it's pointing to a node, it's true.
And where this is going to become not true is at the end of the list where that pointer is going to
be none.
So there are a couple of different ways you could write this.
You could just say while temp next like I did here, or you can say while temp next is not none.
So this is a little bit more concise.
You might argue that the other way is more descriptive and more readable.
I will do it both ways in this course, but for this one I'll just say, Well, temp next.
And then inside the while loop we'll say pre equals temp and in the first iteration pre is already equal
to temp and to move that temp pointer over.
We're going to say temp equals temp next.
So let's walk through this step by step.
We'll say while temp next.
And in this case, temp next is pointing at a node, which is going to make this true.
We'll say pre equals temp in the first iteration.
It is already pointing to the same node as temp.
Then we'll say temp equals temp dot next, which moves temp over like that.
So let's walk through this all the way to the end we'll say while temp.
Next we move pre up in temp over.
This is true again we'll move pre up temp over and then this will be the last time this is true we move
pre up temp over now we say while temp next this is going to be false.
So we stop running the while loop right here.
So for now, I'm going to remove that temp variable.
It's pointing at that last node.
We will need that in a minute.
So I will be bringing that back.
But for now I'm going to remove that.
And then we need to have tail point to that seven node.
We do that like this self tail equals pre and that's going to point that there.
So that's the only thing we're going to use pre for.
So I'm going to remove that.
Then we need to take that four and break it off from the end of the link list.
We'll do it like this self tail next that is tail dot next equals none.
Okay, so that's our code for when we have two or more items in the list.
We had also created these two variables, and let's add this in with the rest of our code.
This is what we have so far.
And then we're going to decrement the length by one.
But it still leaves us with one other edge case.
That's the situation where you have one node.
So let's walk through this situation.
We have head and tail pointing to it.
We have temp and pre set equal to head.
So that's going to look like that.
All four of these pointers are going to be pointing at this one node.
So the two highlighted lines of code there, temp and pre, I'm going to remove those two and everything
above it and we'll walk through these now.
So we say while temp dot next.
So temp dot next.
In other words, while temp dot next is not none.
We're going to run this loop.
Well, right off the bat this equates to false and the while loop does not run.
So let's remove that.
And that's all we're going to use temp for.
So I'm going to drop that out.
Then the next line is tail equals pre.
Well, they're already pointing at the same item, so that doesn't do anything.
So let's remove this line of code.
Then we'll say tails next equals none.
Will Taylor Dot.
Next is already none.
That doesn't do anything.
Then the only thing left to do is to decrement the length by one.
So the length was one because we had the one node in there and we decrement it to zero.
So we ran through all of these lines of code.
We decrement the length to zero.
But the problem is head and tail are still pointing at that node.
So we have to correct that.
So let's bring the code back here and then we'll have to add a few lines of code.
We'll say if the length is zero.
So we have another.
If the length is zero up here.
But the one down here is after we have documented it.
So we had started with one, we decrement it by one and then we got to zero.
So the one on top is if we started with zero.
And then the other one we just added is when we started with one item.
So what we need to do is have head and tail be set equal to none.
Like that.
And that fixes the problem.
So we'll remove this.
And there's only one step left, and that is to return temp, which returns the node that we just removed.
Okay, so there is all of our code for pop.
So we'll look at this code in a moment and vs code.
And what we'll do is we'll start out with two items like this.
So remember, we had three scenarios here that we had to write code for one if we had two or more items.
So we'll run pop.
To see if that works, then we're going to be left with one item and we'll run it again to see if it
works with one item, and then we'll see if it also works when we don't have any items.
So let's flip over to VS code.
Okay, so there is our pop method.
And this is where we create that link list that we just saw with a one and a two node in it.
And I'm just going to print the list so we can see that we have a list with two items in it.
So we'll run this.
And that is our one and our two.
All right.
So I'm going to scroll up here.
And I'm going to paste I'm going to remove this print list here.
And I'm going to paste this in.
So remember, we're testing to see if this works when we have two items and then one item and then zero
items.
So these are going to be our three scenarios here.
We're just running pop three different times.
Okay, so I'll run this.
And then you can see over here.
This has returned.
Two nodes and then it returned none.
So that is exactly what we would expect it to do.
But what we can do also to test our code here is we can scroll up here.
And instead of having this return temp, have this return temp dot value just to test it, you want
it to return the entire node, not just the value.
But for testing purposes, we can just type that in.
Run it again.
And I'll do it this way.
And it returns the two node, then the one node and then returns none.
Which is exactly what we're looking for.
So that means we have a working method for pop.
