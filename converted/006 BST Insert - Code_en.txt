Okay, so now let's code our insert method.
And as I mentioned at the end of the last video, we're going to start right where we left off with
the other video with all of these notes.
I'm just going to bring these down here to the bottom and we'll start coding this.
So we're going to say insert.
We're going to pass it a value and then we'll come down here to the notes.
The first thing is to create a node.
So we'll do that like that.
That creates our node and we can remove that from our list.
The next item on the list is if the route is equal to none.
Then we're going to set route equal to new node.
That is this situation here where root is equal to none.
We have an empty tree and we're going to set root equal to the new node.
We'll do that like this.
If route is none, route is equal to the new node.
But there is one other line of code that we need here.
We need a return statement because if we're going to insert this directly into our tree at the root,
we don't want to continue running code in this method.
So now we can remove that.
Then we're going to say temp equals self root.
That's actually the way we would write the code to declare that variable.
So we can just.
Move that up.
So that brings us to our while loop.
So our while loop is going to be wild.
True.
And normally you run a while loop until this condition is false and obviously true is always going to
be true.
But the way we're going to break out of the while loop is by hitting a return statement at some point
within the loop.
So remove that.
Then we'll say if new node equals temp, return false.
And that is this situation where the new node is equal to another node in the tree.
And if this happens at any point, we need to return false.
So we'll do that like this.
If new node dot value and it's important that you not just say if new node equals temp, you have to
say new node value and temp dot value because we're comparing the values if they are ever equal while
we're running through the while loop, we're going to return false.
So now we can remove this.
Now we're going to say if it's less than we're going to go left.
LS That number is greater than and we're going to go right.
So we're going to start with left.
And we'll say if new node value is less than tempting value.
And since we're running out of space here, I'm going to move this if statement up to the top of the
screen.
But I want you to notice that this is inside of our while loop.
So everything we're going to do to code out the rest of this method is going to be contained in that
while loop.
So we're going to move this up like this.
And the second statement in the notes down here is actually nested inside of the other if statement.
And we'll see that in a second.
But for now, I'm going to remove the notes and it's going to be easier to finish explaining this by
bringing up a diagram.
So we're going to insert this node here.
And remember, temp is going to be pointing at the root here.
So this if statement at the top, we're saying if new node value is less than temp dot value, and in
this case it is.
So that means we know we're going to go left.
But there are two ways we can go left.
Either that spot is open like this, in which case we're going to place that node.
Otherwise there will be items here and then we'll need to compare the 18 to the next item and the tree.
So let's assume that this spot is open first and we'll say if temp left is none, which means that spot
is open.
We're going to set temp.
Dot left to be equal to the new node.
Now that we've placed that there's one more step that we need to do here and we need a return statement,
so we'll return true.
So that's what we do.
If that spot is open, if the spot is not open like this, we need to move the temp variable down to
point at that 21.
So we'll say temp equals temp dot left and it moves temp down.
And remember, this is all inside of this while loop.
And now we're going to run through all of this again.
So obviously, we're going to go left because the 18 is less than the 21.
So then we come to this line if temp left is none, and in this case it is none.
That we're going to set temp left equal to the new node like that.
And then, of course, we'll return true.
And we're done placing that node.
Now let's look at inserting something on the right.
I'm going to bring our temp variable back up here.
I'm going to move this to the left.
Since we're going to be inserting on the right, we'll need a little bit more room.
So for this, we're going to say ELTs, and I'm going to remove that 82 node on the lower right hand
corner of our tree there.
That will be the one we're going to insert.
And just like on the other side, we can have a situation where we have a node to the right of the 47,
or that spot can be empty.
If that spot is empty, we'll say if temp right is none.
In this case, temp dot right is none.
Then temp, right?
Equals new node that is temp dot, right equals new node.
And then we need to return.
True.
The other option is that there is an item there.
And they will say temp equals temp dot.
Right.
That is temp dot.
Right.
That moves temp down.
And remember, this is in a while loop.
So that causes us to go through all of this again.
So then we'll say if temp right is none.
And in this case, it is none.
Then we'll place that temp upright equals new node That is temp dot.
Right.
Equals new node.
And that is everything we need to do to be able to insert that node.
So now let's look at this code in what the rest of the code that was in the while loop.
That is our full while loop there.
So to walk through this, this is for the situation when we try to place a node that is a value that
is already in the tree.
Like this an identical value.
Then if it's less than we go left, if it's greater than we go right now, let's look at this while
loop in with the rest of our code like that.
And that is the entire insert method.
And we'll look at this in a moment in VTS code.
And when we do, we're going to create a tree that starts with a number two.
And then we're going to add a number one.
And then we're going to add a number three.
And to make sure that these are being inserted correctly will print out root value.
And then if we do root dot left dot value, we should get one.
And then root dot, right dot value, we should get three.
So let's flip over and take a look at this in VTS code.
So there is our insert method and I'm going to scroll up.
This creates our binary search tree here.
And we're calling it my tree.
Then we're going to say my tree insert that's going to put the number two in at the root.
And then we're going to insert the number one that should go on the left and then insert a number three
that should go on the right.
And then down here, we have three print statements to make sure that the tree was created correctly.
So we're going to print my tree root value.
That should return the number two.
And then we have my treat root left.
Value should return the number one.
And then print my tree root dot right dot value.
And that should return the number three.
All right.
So I'm going to run this.
And that has returned to one three.
All right.
That is our method for insert.
