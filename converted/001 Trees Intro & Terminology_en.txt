Welcome to Trees.
And we have already seen a tree in this course.
It's a link list.
So a link list is just a tree that doesn't fork, but it is actually a form of a tree.
So we'll use this as the starting point for creating the tree for this section.
Remember, this node looks like this.
So I'm going to put this back and then we'll turn this into a node for a binary tree.
So the first thing I like to do when we move to a new section for each data structure is have a different
color.
So a binary tree is going to have two arrows like this.
And it's going to look like this.
Value left and right.
So let's move this back and let's build out a small tree.
So this node, of course, can point to other nodes.
So if you have something like this, you can think about it as dictionaries.
Like this.
That's essentially the same thing, except this is a lot easier to look at.
So the way we've designed our nodes with value left and right, they're set up where they can only point
at two other nodes.
So if you set it up that way, it's going to be a binary tree.
But trees don't have to be binary.
You could have this 0.23 nodes or 100 nodes or have it where you could point it to unlimited nodes.
But for what we're going to build, each node can only point to two other nodes.
And then, of course, these new nodes that we've added can also point to to other nodes themselves.
So now let's look at some terminology.
This tree here is what is called full and a full tree.
Every node either points to zero nodes or two nodes.
So if you do something like this.
Now you have a node, the seven node that only points to one node.
So it is no longer full.
So let's remove that.
Make it full again.
And if we remove these two, it is still full.
But it is also something else.
It is perfect.
With a perfect tree.
Any level in the tree that has any nodes is completely filled all the way across.
So this is also a perfect tree.
But if we remove these two, it is no longer perfect.
But it is still full.
So let's bring these two back.
So a perfect tree is also something else.
It is complete.
So with a complete tree, you are filling the tree from left to right with no gaps.
So if we add a node down here, it is still complete because we are filling the tree from left to right.
But it is no longer full and it is no longer perfect.
If we add one more node like this, filling this from left to right, it remains complete, but it is
now also full.
But it is not perfect because we haven't filled it all the way across.
So if we do this now, it is full and perfect and complete.
Okay, so let's focus in on this tree.
Drop some of these off.
So this node here is a parent.
Of these two child nodes.
These two child nodes, because they share the same parent, are also called siblings.
And every node can only have one parent.
So if you see something like this where a node has more than one parent, then it is not a tree.
So let's put this back.
And child nodes, of course, can also be parent nodes.
Now these nodes at the bottom, they don't have any children, and a node that doesn't have children
is called a leaf.
All right.
That is our intro.
Four trees.
