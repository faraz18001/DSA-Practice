So now let's look at popping an item off of the end of the link list, and we're going to split this
up into two videos because this is a much more complicated operation than pushing something on.
And we touched on this in the linked list, Big O video about how pop is a more complicated method.
So I'm going to bring up our link list like this.
Pop is going to look like this.
We're going to remove that last item and we're going to return it.
We have two edge cases.
The first edge case is if we have an empty link list.
And then the other edge case is if we only have one node in the list.
So if you want to have a challenge, pause the video here and try to code this without watching the
rest of the video and then come back.
Otherwise, I'm going to get in deeper to the logic of how we write this.
But we're still not going to get into the code in this video.
We won't do that until the next video.
The thing that makes this more complicated is when you move tail to the left like this and remove that
last node.
Tail is moving the opposite direction of the arrows in the length list.
The arrows are all pointing to the right and tail is moving to the left.
So let's put this back and look at this from this kind of a perspective to better understand what we're
going to have to do here.
So what we want to do is move tail to here.
Set Taylor next to none and then return the node that we've popped from the end of the list.
So let's put this back the way it was and look at what we need to do to do that.
We need tail to point to this node in order to make tail point there.
We need to set it equal to something that is pointing at that node.
And the only thing that is pointing at that node is the next value in this node.
So that means we have to get to this node.
Well, the only thing that's pointing at that node is the next value in this node.
And so on until you get to the head.
So that's why you have to start at the head and move node by node through this list until you get to
here.
And then you set the tail pointer equal to that pointer and that's how you get tail to point at that
node.
And then you say tail next equals none.
Then you return the node that you popped from the end of the list.
Okay, so let's put this all back.
Like this.
So if you weren't able to code it before, if it was too complicated, this is another place that you
might want to pause the video and take a crack at it, because I'm going to get into a little bit more
detail of how to approach this.
So I'm going to bring in two variables pre and temp, and I'm going to set them equal to head.
And for now, I'm going to just remove head and tail and I'm going to move pre underneath like this.
So what we're going to do is we're going to say if temp next is not none.
In other words, we're not to the end of the list.
What we're going to do is we're going to set pre equal to temp, which it is already in the first iteration,
and then we're going to set temp equal to temp.
Next.
And then we're going to do it again.
Is that none?
We're going to move pre up and temp over and we just keep doing this.
And this will be the last time that it's not none.
We're going to move pre up.
Temp over and now.
Tempt next is equal to none.
And these stop right here.
So we're going to need that temp variable to return that node that we're popping off the end.
But for right now, I'm going to remove temp and we'll work with the pre variable first.
The only thing the pre variable is for is we're going to set tail equal to pre and that's the only thing
we're going to use it for.
That's going to move tail back.
Then we'll say tale Dot.
Next is none that breaks this off the end of the list.
And remember, temp is still pointing here.
We need that to be able to return this.
We'll say return temp and that returns this node.
So we will code this in the next video.
But for now, that is our intro for Pop.
