Okay, Now let's talk about classes.
Classes are an incredibly important topic because every data structure that we're going to create is
going to be created using classes.
So what is a class?
So my favorite analogy of a class is a cookie cutter.
And I'm just going to shrink this down like this so we have some more room.
But think of the cookie cutter like this.
There are built in cookie cutters, so to speak, in Python, where you can create an integer, you
can create strings.
And when you create a class, you are creating your own data type.
So for our simple example here, since we are using the analogy of a cookie cutter, we're going to
create a class and we're going to call it Cookie.
You're going to want Python to do particular things.
When you create a new cookie and you do that with what is called a constructor and it has a particular
syntax, it looks like this.
So it starts out looking like a function with the def on there and then it's double underscore  innit
or some people say in it.
But to initialize this and then another double underscore.
And one of the things that is going to be different about a method, then a function is the self keyword.
If it has self in there, it is a method that is part of a class.
And we'll talk a little bit more about that self keyword as we are going through this example.
And then there is the parameter color in this case.
And what we're going to do with that is color is what this variable is here.
So if you pass this the color green, it gets passed to here and self dot color applies to the specific
instance of color that we're creating.
So we would create a new cookie like this.
So we'll say cookie one equals cookie and then will pass it the color green.
So cookie one is the variable name, just like if you had a variable and you set it equal to an integer
or a string.
But instead of an integer or a string, we are setting it to be the type cookie and we're passing it
the color green.
This gets passed to the constructor and that creates a green cookie.
So now it makes it a little easier to describe this self keyword.
This particular instance of cookie, this one here that is called cookie one.
It self is green.
And this will make even more sense when we create another cookie.
So we'll create another one here.
We're going to call this one Cookie two, and we're going to say that this one is blue.
So, Cookie two different variable.
It is a different cookie.
We're going to pass this one.
The color blue it's self is blue, different cookie.
So that is our constructor to be able to create new cookies.
But in addition to the constructor, we can build other methods to do other things with these cookies.
So I'm going to remove these for now.
And our first method, we're going to call Get color.
It has that self keyword in there, and if all it has is self, that means there are no arguments passed
to this.
It's just going to return the color for the particular cookie that you're calling this on.
And then the other method is going to be called set color.
This one, you pass it a color and it will change the color of that particular cookie.
So we're going to go run this code in VS Code because this is all code that we can run and we're
going to create our two new cookies like this.
So let's flip over to VS Code.
Okay, so here is our cookie class.
This is where we create the cookies.
And then there are two print statements down here to make sure that we are able to get the colors for
cookie one and cookie two.
So I'm going to run this.
And you can see up here in the output cookie one is green, cookie two is blue.
So I also want to do a set color.
So I'm just going to paste some code in here like this.
And right here we have cookie one dot set color.
And that we have these print statements down here to check to see if the color has actually changed.
So let's run this.
And now we have cookie.
One is now yellow and cookie two is still blue.
So let's flip back over.
And cookie one is now yellow.
But how are we going to apply this in the course?
As I mentioned at the beginning of the video, we're going to use classes for every one of our data
structures.
So let's just walk through at a high level how we would use this for a linked list.
We would call this class linked list.
Remember, we always use a capital.
We would have a constructor.
And I'm just going to put this header line here.
I'm not going to write all the code for each one of these methods, but we could write something for
appending something to the length list, to pop something off the end of the link list to prepend something
to put it on the beginning.
To insert something, to remove something.
So we're going to write all of these methods for Linked List and more in the course, and that is how
we're going to use classes.
