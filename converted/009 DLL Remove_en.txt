Now let's do our remove method.
That's just removing an item at an index.
So if you want to code this, go ahead and pause it here.
Otherwise, we'll get into this.
And there is our doubly linked list.
Obviously, we can't remove an item at an index out of range.
So we'll say if the index is less than zero or the index is greater than or equal to the length, we're
going to return none.
And then if we remove the first item, we've already created a method for this.
We'll say if the index is zero, returns self dot pop first.
And likewise, on the other end, we'll say if the index is equal to the length minus one returns self,
dot pop.
So let's look at all three of these and then we'll bring back up our doubly linked list.
So we are going to remove the item at the index of two.
And since we're going to return that, we need to have a variable point to it.
And we'll use temp.
And I'm going to show you a couple of different ways of doing this.
One way you could do it is create before and after variables.
And when you remove temp, you can say before dot next equals after, and you can say after, dot previous
equals before.
And personally, this is how I would write this, because I think it would be easier to read, but I'm
not going to do it this way in this video because I want to show you a different way that you can do
this.
So I'm going to bring this back and we are only going to use the variable temp and we'll create that
by saying temp equals self dot get.
Let's look at this in with the rest of our code.
We're going to pass that JIT method, the index where we want temp to point.
Now let's bring back our doubly linked list.
So I'm going to pop this 23 up here.
And the way we're going to do this is those two arrows that we redirected before with a before and after
variable are these two arrows.
And we did this with them.
We can do this by just using the temp variable.
And we're going to do it like this temp.
Dot.
Next dot.
Previous.
That's the first one.
You can represent that by saying temp next previous.
We're going to set that equal to temp dot previous.
And the code looks like this temp dot next dot previous equals temp dot previous.
And that points that down here.
And then we do that on the other side.
We say temp dot, previous dot next equals.
Temp.
Dot next.
And that looks like this previous next equals temp next.
And that points this down here.
And as I mentioned before, I think doing it this way is harder to read.
I would do it the other way, but I wanted to show you another way of doing this.
Now we need to have those two arrows.
Stop pointing at nodes in the linked list.
We'll do that like this next equals none and temp dot previous equals none.
And that does this.
And that removes that from our list.
So we can remove our list now and we'll decrement the length by one, and then we'll return temp, which
returns that node.
So let's look at this code in with the rest of our code like that.
And we'll look at this in a moment and vs code and we'll build this doubly linked list 012.
We'll remove the item at the index of one and will be left with a list with values of zero and two.
So let's flip over to VS code.
So there is our remove method there and I will scroll up.
This is where we create our doubly linked list with values zero one and two.
And this is where we will print that out and I'll run this.
And that has printed out zero one and two.
So in between these now I'm going to insert this line of code.
I'll paste that in.
And we are going to run my doubly linked list.
Remove with a value of one.
Then I have a line break there and there we're going to print out our list again.
Okay, so let's run this.
So this is returned to our node and is returned zero and two.
So let's come up here and do temp value.
To make sure this is returning the right value and we'll run this again and it's returning the one node.
And then our doubly linked list now contains zero and two.
So we'll come back up here and remove the dot value.
And now that will return the full node.
All right.
And that is our method for remove.
