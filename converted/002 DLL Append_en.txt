Okay, so let's do our append method, and I'm going to start by bringing up our singly linked list.
And when we added an item with a singly linked list, we just pointed this arrow over, move tail over.
And that added it into the list.
When we have a doubly linked list.
The only difference is we have these arrows going the other way and the only difference in the append
method is going to be that green arrow that is pointing back from the node that we're appending.
So we'll have this go across.
That's all the same.
The new thing is having this come back and we still have tail move over and that adds that into the
list.
And we're still going to have to code for this situation when we don't have any items in our doubly
linked list.
And then we'll have head and tail point to that new node.
So if you want to code this, pause the video here.
Otherwise we'll move forward with the code.
So we'll call our method append.
We're going to pass it a value and we'll use that value to create a new node.
We'll pass that value to the node class.
And that creates our node.
So the first thing we'll code for is this situation.
When we have an empty link list where we have head and tail point to the new node, we have to test
to see if the link list is empty.
And we'll do that like this.
If head is none.
That will have head be set equal to the new node like this.
And tail will be set equal to the new node.
Like this.
Let's add this in with the rest of our code.
And of course, the other possibility is that we do have items in our linked list, so we'll say else
and we'll build out our statement.
So we'll say tails next equals new node that is tail dot next.
Equals new node like that.
And no dot previous equals self dot tail.
In other words, that previous arrow on the new node is going to point to the same node that tail is
pointing to.
Like this.
Then we'll set tail equal to new node that moves tail over and adds that item into the list.
So now let's add this in with the rest of our code.
And the only things left to do are to increase the length by one.
And then we will also return true.
So just like we did in singly linked lists, we're going to use the append method in the insert method,
and the insert method requires a boolean to be returned.
So we're going to return a boolean here so it can be used in the other method.
So that is our code for append.
And we'll look at this in a moment in VTS code.
And when we do, we're going to initialize the link list with a node with the value of one and we will
append another node.
So the link list will contain one and two.
So now let's flip over to VS code.
So there is our append method there and this is where we initialize the link list with a one and append
a two.
And then down here we'll print out our doubly linked list.
Okay, so I'll run this.
And you can see up here that this printed out a one and a two.
So we have a working method for append.
