So now we're going to write the method to append an item to the end of the link list.
So that's going to look like this.
We're going to create a new node.
We'll have that last item that was in the list point to the new node will have tail point to the new
node and that adds it into the list.
So there were two things we did here.
Last item and tail pointing to the new node.
But we do have an edge case for when we don't have any items in the linked list.
Obviously, we can't have the last item and tail point to the new node because there is no last item.
In this situation we're going to have head and tail point to the new node.
So if you want to code this, these are the steps for doing the append method.
Pause the video here, go over to VS code and see how far you can get with this or if you can write
the entire method and then come back and we'll walk through it.
So now we're going to get in to the code.
So of course, with the append, we're going to pass it a value in order to create that new node.
And it has that self keyword and the parameters.
That's how you know, it's a method inside of a class versus it being a standalone function.
So we'll say new node equals node will pass it.
The value that we pass the append method, and then the node class will create our node.
I always like to code for the situation where.
These data structures are empty, like this first, where head and tail is going to point to the new
node in this case.
So in order to do this, we have to determine is the list empty?
So I'm going to say, if head is none, which is the case here, we'll set head equal to new node like
this, and then we'll set tail also equal to the new node and now head and tail point to the new node.
So let's take this code and add it in with the rest of our code like this.
This is what we have so far.
So now let's code for the situation where there are items already existing in the link list.
We'll say else.
And now let's build out this else statement.
So we're going to say tail dot next equals new node, and that is tail dot.
Next, we're setting it equal to the new node like that.
And then we're going to move tail over by saying tail equals new node that moves that over and adds
that node into the list.
Now, let's add this else code back in with the rest of our code like this.
Okay, so let's look at what we've done here.
We've created a node we've tested to see is this list empty?
In this case, we're going to do this.
Otherwise we're going to do these steps here.
The only thing left to do is to increase the length of the link list by one.
And there's one other thing I'm going to do here, and this is completely optional.
I'm going to have it return true.
And as a stand alone method, this is actually not necessary for the append method.
But the reason I have it in here is in a few videos, we're going to write another method that calls
on the append method, and that method requires a true or false to be returned.
So we're going to look at this code in a moment in VTS code.
And when we do, we're going to create a link list that looks like this.
We're just going to initialize it with a node with a value of one, and then we're going to see if our
append code works by appending another node with the value of two, and then we'll print out the link
list with our print list method that we created in the last video to see if we have a one and a two
in our link list.
All right.
So let's flip over to VS code.
So I just want to point out that our append method down here, which we will look at in a moment, is
a method inside of the linked list class.
Sometimes if you're new at this, it's hard to visualize where the new code that we've written fits
in with the rest of the code.
So I just want to show all of this.
We have our constructor for the link list here, our print list, and then we'll scroll a little bit
here.
And that is our append method.
Now, down here, what we're going to do is we're going to create a new linked list with the value of
one just like we showed in the diagram.
And then we're going to say my length list dot, append the number two, and then down here will say
my link list, dot print list.
And then we should see one and two print it out.
So let's run this.
And there we have one.
And to print it out.
So it looks like we have a working method for append.
