Okay, let's create our get method and get is going to look like this.
We're just going to get an item at a particular index.
So as we've been going through these methods for doubly link lists, you may have noticed that some
of these are essentially the same as the methods for singly linked lists.
The big exception to this point has been pop, and that one's very different and doubly linked lists
versus singly link lists.
Get is going to be one of those methods that we write very differently than the way we did in singly
linked lists.
So let's start out by actually bringing up a singly linked list and walk through the steps that we went
through to make this work in a singly linked list.
First, we had to make sure our indexes were, in this case, zero one, two or three.
We couldn't have anything out of range on this end, and we couldn't have anything out of range on this
end.
So we would say if the index is less than zero or greater than or equal to the length, then we're going
to return none.
This is going to be the same in a singly or doubly linked list.
So let's bring up our linked list here.
And what we did is we set temp equal to head.
Like this and will remove head and tail.
And we created a for loop to go until we got to the index and we would move temp forward by saying temp
equals temp next until we got to the index that we were looking for.
And then we would return temp.
So this was our code for the JIT method for a singly linked list.
And it just so happens this all works just like this for a doubly linked list.
But in a doubly linked list, we can optimize this.
So let's bring this up, turn this into a doubly linked list and look at a couple of scenarios.
First, let's return the item at the index of one.
In this situation, we're going to start at the head and we're going to iterate through until we get
to that index.
And then we can return that node.
But if we're looking for the note at the index of two, it would be more efficient to start at the tail
and go the other way.
It's closer to tail than it is to the head.
So if we're going to optimize this for a doubly linked list, there are some changes that we need to
make.
So let's bring our code back and make our changes to this code.
So you only want to do this for loop here if the item you're looking for is in the first half of the
list.
So we're going to say if the index is less than self length divided by two.
In other words, it's in the first half of the list.
Only then do we run this for loop.
So if it's not in the first half of the list, that's in the second half, obviously.
So we'll say else.
I must shrink this down a little bit here so we have more room.
And the first thing we need to do here is set temp equal to the tail.
In other words, temp was here.
But in this situation, we need to start here and move backwards through our Double-A link list.
Then we need to create a for loop that's going to start at this point and go backwards.
And we do that like this.
So what we saw in the other four loop is we just passed it and index.
But what you can also do with a for loop is you can tell it the number where you would like to start.
In this case, the length minus one and other words, the index of three.
Normally when you have a for loop, you just wanted to increment by one every time you loop through.
In this case we can tell it to decrement by one.
Every time we loop through.
And as we do, we'll say temp equals temp dot previous, which is going to move that to the left.
And once we get done running through our for loop, we'll return temp, which will return that node
that we're looking for.
So let's look at this.
With the rest of our code.
We'll look at this in a moment in VTS code.
We'll create this doubly linked list.
And we'll run the get method at the index of one, which will return the value of one.
And then we'll run it again at the index of two, which should return the value of two.
But this is going to test to make sure that our code is working.
That goes backwards through our doubly linked list.
All right, so let's flip over to VS code.
So there is our gift method there.
And this is going to create our Double-A link lists with zero one, two and three.
And then we'll print this.
And there is our linked list with zero one, two and three.
All right.
So I'm going to scroll up here.
And I'm going to replace this print list down here.
And then we're going to get the item at the index of one, and we're going to get the item at the index
of two.
And I'm going to go ahead and change this to value before we run this.
Course, we're going to change this back when we're done testing thus.
And I'll run this.
And you can see up here that we have returned one and two.
So I'll remove the dot value up here.
And that is our method.
Forget.
