In this video, we're going to continue writing our code for deleting a node from a binary search tree.
And specifically, we're going to write the code for removing a leaf node and removing a node when that
node has an item on the right, but not the left.
And then also for writing the code for when that node has an item on the left and not the right.
So we're going to cover all three of these in this video.
In the last video, we wrote this code and you can see that we're starting to get quite a bit of code
here and we're quickly going to run out of room.
So what I'm going to do here is remove all of the code that we're not going to use in this video.
So first, this code up here only applies if the value that we're looking for is not in the binary search
tree.
And in this video, that's not going to apply.
So I'm going to remove this.
And then also in this video, we will only traverse to the left.
We're not going to traverse to the right.
So I'll remove this code as well.
So we'll start out by removing the 21 node when it's a leaf node and we'll kick this off by calling
an instance on the root.
And because 21 is less than 47, we'll call an instance on the 21 node as well.
And because this is the number that we're looking for, that'll bring us down to this else.
So now we need an if statement to test to see whether this is a leaf node.
So we'll say if current node left is equal to none and current node, right is equal to none.
And that is the case here.
Then what we're going to do is return none.
And it will return this to the calling method.
And this gets popped from the call stack.
So now this is the active instance.
This is the last line that it ran.
And this code here, call that method that was just popped from the call stack.
That means we're going to set current node left to be equal to none.
So when we set current node left to be equal to none, that removes the 21 node.
And then we'll go through that same process that we've seen a few times now of removing this from the
call stack.
So now let's look at writing the code for removing a node that has a node on the right but not on the
left.
And once again, we'll start this out by calling an instance on the root.
The value that we're trying to remove is less than current node value.
So we'll call an instance on current node left.
And now this is the value that we're trying to remove, which brings us down to this else statement.
So the code that we'll use in this situation will go under this if statement.
But to save room, I'm going to remove this and say lf current node left is equal to none.
And that is this situation here.
We'll set current node to be equal to current node.
Right.
And because this is the active instance, current node is this node here.
And then we're setting it to be equal to current node.
Right.
Which moves this down to here.
And then we move to this line, which returns current node, and it returns it to here.
And once it runs this return statement, this is pop from the call stack.
And this once again becomes the active instance.
This is the last line that it ran.
And we're setting current node left to be equal to this pointer to the 22 node, which takes that left
pointer from that 47 node and points it down to here.
Now, that 21 node doesn't have anything pointing to it and it gets garbage collected and it is removed
from the tree.
And then, of course, this gets popped from the call stack.
So now let's look at our third situation where we have a node that is on the left of the node that we
want to remove, but it is open on the right.
And I'm not going to walk through the steps of this because it is basically identical to what we just
saw here.
It's just we're reversing left and right.
So now we'll bring back this code as well.
And this is all of our code that we need for those three situations.
Now, the only thing left is to write the code for when we have an item on the left and the right of
the node that we want to remove.
And for this situation, we're going to say else.
And then we'll build out the code underneath this statement over the next two videos.
In the next video, we'll write a helper method and then in the following video will actually build
out this statement.
But for now, that concludes Delete Node Part two.
