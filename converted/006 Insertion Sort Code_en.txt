OK, now let's code insertion sort, we'll pick up where we left off in the last video with this list,
all shrink this down here and we'll start writing our functions.
So we'll say insertions sort.
We pass it this list and we'll start out with this for loop.
The range goes one to the end of the list.
And remember, we're always going to start at the index of one, that second item in the list.
That we're going to need a variable to hold the value of that item, so we'll say temp equals my list
at the index of EI.
So we're going to compare that to to the item before it will call this Jay.
Since that's the index, before we can just say J equals ay minus one.
And because that two is greater than the one, we're just going to put that there.
The first time we have an item that is going to be less than the item before it is going to be this
three.
So let's just skip ahead to that.
And because J equals ay minus one will put the J there.
So we're going to have a while loop here that says while temp is less than my list at the index of J,
the index of J is going to be that four and temp is going to be three.
So we're going to say while temp is less than my list at the index of J, and that is less than in this
case.
The first thing we're going to do is move that for over into that open spot, so we'll say my list J
plus one is equal to my list at the index of J.
That moves that over.
Then we want that three to be moved over into the index of J like this.
So we'll say my list at the index of J is now equal to temp, so the value at that index is now going
to be equal to three, then we need to move that Jay over one to point at that to like that.
We'll do that with this line of code.
Jay minus equals one will decrement that by one.
Then we come up here and run the while loop again.
So now is temp less than my list at the index of J.
So in this case it is not.
And that's going to break us out of this while loop and we'll just leave that index equal to three.
So there is an edge case that we need to talk about.
I talked about this a little bit in the last video and to explain that, I'm going to exchange the one
and the two here.
Like this, and then I'll walk through what's going to happen with the code as it is written if we move
that one over, so we would start here with the one.
Jay would be the item before that, and then we run through the while loop and say, is temp less than
my list at the index of it is?
So we'll move the two over.
And then this line of code is going to move the one over and then this line J minus equals one is going
to have J pointing at the index of negative one.
And this is where the problem is.
You don't want this to keep moving over.
You want the loop to stop as soon as J is ever equal to negative one.
So we need to add something to the conditional and our while loop.
So will say and J has to be greater than negative one.
And now because J is equal to negative one, that breaks us out of our while loop.
We stop running this code and then we just leave that index to have that value of one.
So now all of that code works, the only thing left to do is to return the list.
So now let's take this list at the bottom end on order it again and then we'll go take a look at this
code and this list in VSE code.
So there is the insertion sort function here and then down here will run insertion sort of on our list
and will print out the results.
So I'll run this.
And that gives us our sorted list one through six.
And it looks like we have a working function for insertion sort.
