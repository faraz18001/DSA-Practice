Now let's look at stacks.
So my favorite analogy for a stack is a can of tennis balls.
Let's go ahead and remove these.
And I'll add one back.
This is pushing an item onto the stack.
And then, of course, we can push a second one under the stack.
But the thing that makes a stack a stack is you can only get to the last item that you pushed onto the
stack, that second tennis ball.
As soon as you push that second one on, you can't get to the first one without first removing the second
one.
And then when we push the third ball on, we can't get to the second one.
The only one we can get to is the one that is on top.
This is called Life O Last in, first out.
So after we remove that third ball, it is only now that we can get to the second one and then we can
get to the first one.
So let's look at an example of where you might use a stack.
Let's say we have a web browser and we go to Facebook.
And then after that, we go to YouTube, and then we go to Instagram and then we check our email.
What we have created to the right of this computer screen is a stack of all of the previous websites
that we have visited.
So when we hit the back button, we are popping an item off of the stack and it is only by removing
that item that we can hit the back button again and get to the next item and so on.
So there are a couple of common ways of implementing a stack.
First is to use a list.
So for something to be a stack, you just have to add and remove from the same end.
So if you're going to use a list, there's one end that you want to use for your adding and removing.
And the reason for that is if you add on this end or remove on this end.
It is of one as opposed to the other end, where if we're going to take this item and remove it, we
have to re index everything after it and then when we bring it back, it's the same thing.
We have to re index to bring this back.
So whether you are adding or removing from this other end, it's o of n.
So if you're going to use a list to implement a stack, you want to make sure that you are doing your
adding and removing from the other end.
Except, of course, the stack would look something more like this conceptually.
You would pop an item from the stack like that or push the item on.
That's the terminology for adding and removing.
And this is probably the simplest way to implement a stack.
We're going to do something a little bit more complex to give ourselves a little bit more of a challenge.
We're going to implement it using.
A lengthy list.
And we're going to implement our stack where it looks like this.
What you don't want to do is implement a stack where the none terminated end is this way.
And let's have a look at why when you remove an item from the end of a link list, here it is.
O of n adding it is of one.
Versus the other end where removing and adding are both of one.
So that is why your stack.
Should go this way and not the other way.
So let's put this back for now.
When we implemented a linked list, we had a method called pop first to remove the first item.
We'll do something similar to pop an item from the stack.
And then likewise we had prepend.
We can use something similar to that to create our push method to push an item onto the stack.
So those two will be repurposed to become pop.
And push.
Now with the link list, we had head and tail with a stack.
We'll call this top and bottom.
But with a stack we're only adding and removing from the top, so we really don't need bottom.
So our stack.
Is going to look like this.
All right.
That is our overview.
Of stacks.
