So now we're going to code depth first search preorder.
So I'm going to bring up our tree here, the same one we've been working with, but for this, I'm also
going to bring up a call stack so we'll start out our method like this DFS preorder.
Remember, this is a method inside of the binary search tree class.
And we're going to have a results list that we're going to return, I'll bring this up from the bottom
like this, and the next thing we're going to do, we haven't seen this before, but inside of a method,
you can have a function.
I'm just going to bring in the function is a recursive function and we're going to call it Traverse.
And I'm just going to move this up so we can focus on this.
So we're going to pass traverse a node and the first thing we'll do is take the value from that node
and write it to the results list.
Then if there's a node on the left, this is where the recursion happens.
We're going to run traverse on that note on the left.
Then if there's one on the right, we're going to run traverse on the node that's on the right.
And the way we kick all this off is we call the function with the route.
And when we do, it pushes an instance of traverse onto the call stack in this case will say that's
the node with the number 47.
That's the instance that we're talking about.
And that instance of traverse, the first thing is going to do is append the value of that current node,
the forty seven.
Then it's going to look to the left to see if there's a node and if there is, it'll run to reverse
on that node.
That's the twenty one now that gets pushed onto the call stack and because twenty one is at the top
of the call stack, that is the instance of traverse that is running now.
So the first line of that instance of traverse is going to append the number twenty one to the results
list and then that is going to look to the left and there is a note on the left.
That's the 18 that gets pushed onto the call stack and now it is going to append its value to the results
list.
Eighteen doesn't have anything on the left.
It doesn't have anything on the right.
So now we can pop that from the call stack.
Now, the twenty one is at the top of the call stack again.
It's already gone.
Left now it needs to go right.
So the node on the right of the twenty one is the twenty seven.
First thing we do is we append that value to our results list.
The twenty seven is going to look left, it's going to look right.
There are no child knows to the twenty seven.
So now we can pop that from the call stack.
Now the twenty one is the top of the call stack again.
It has gone left.
It has gone right and now we can pop that from the call stack.
So now the 47 is at the top of the call stack again.
It's already gone, left now it needs to go right.
So now we're going to run traverse on the 76 node.
First thing we're going to do is append the value of the 76 node like this, and then we're going to
go left.
That's the 52 node.
We'll push that onto the call stack.
First thing we do is run this line will append that value to the results list.
52 is going to look left and right, it does not have any left or right children.
So we can pop that from the call stack, the 76 has already gone left, now it needs to go right.
That'll push the 82 onto the call.
Stack will run this line, which adds 82 to the results W.
It's going to look left and right, there is nothing on the left or the right of the 82, so we can
pop that the 76 has gone left and it has gone right.
So now we can pop that from the call stack.
And the forty seven was the first item on the call stack.
It'll be the last one off.
It has gone left.
It has gone right.
So now we can pop that off the call stack like that.
And that was the original function call when we said traverse self-taught route that was with the number
forty.
Now the only thing left to do is return this results list.
So now let's look at this with the rest of our code like this, and that is the entire method.
So we'll look at this code in a moment in VSG code and will build this tree.
And when we run this, we would expect to get this list returned.
All right, so now let's flip over to Vyas code, so there is our method there and I'm going to scroll
up.
And this creates our binary search tree that we just saw, and this will run depth first search preorder
on that tree and we would expect to get this list here.
OK, so I'll run this.
And it looks like that has returned what we have expected.
All right, and that is our method for depth, first search preorder.
