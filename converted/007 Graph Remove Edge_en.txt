So now let's remove an edge.
We'll bring this up.
And removing an edge is removing that white line at the bottom between the one and the two.
And then, of course, what it's really going to look like is us doing this.
So I'm going to bring this down to the bottom.
I'm going to bring these back because this is what we need to remove.
And we'll start our method like this and we'll pass it to vertices that will call vertex one and vertex
two.
And then we'll do this at that key of V one, which is going to be one.
We want to remove the vertex of two like that.
And then we'll do that on the other one as well, where we remove vertex one like this.
So we can only do this though if Vertex one and Vertex two both exist, so we'll need an IF statement.
And this basically says if Vertex one and Vertex two both exist as keys in the adjacency list, then
we can do these next two lines.
And if that conditional in the F statement is true, after we run these two lines, we will return true.
Otherwise we will return false.
So we'll take a look at this in a moment in VW's code.
And when we do, we're going to build this graph and then we'll remove the edge between A and B, just
like that.
All right, so let's flip over to VW's code.
So there is our method there, and this creates our three vertices, A, B, and C.
This connects them all together.
And then down here, we will print this graph out.
So I'll run this.
And that gives us our graph with A, B and C, and they are all connected to each other.
So I'm going to come down here.
I'm going to paste this line in to remove the edge between A and B.
So now I'll run this again.
And you can see up here that the edge between A and B has now been removed.
But the code as it is written here, does not address one of our edge cases.
And to show you what I mean, we're going to flip back.
So this was our original graph.
Now we're going to create a graph that looks like this.
I'm just going to add a vertex DX, but it will not have any edges with any of the other vertices.
Then I'm going to run Remove Edge between A and DX.
So it'll look at that.
Let's flip back over to VS code.
So this is the same method up here.
The only change that we have on this page versus what we saw before is we added the vertex dx here and
then down here the remove edge is between A and DX instead of A and B, So I'll run this.
And now we get this very long error.
So I'm going to move this over so we can see this a little better.
But you can see the problem here was with remove edge here and then the error itself is a value error.
So remember, a value error will be using that in a moment.
And the reason for that is it says list remove x.
It is not in the list.
So let me pull this back over here.
So when we try to run this line right here, it said line 24 was the problem.
We're trying to remove an item that is actually not in that list.
So now let's flip back and look at how to fix this.
So that is our method so far.
What we need to do is this we'll put a try in right here.
So we're going to try to run these two.
But in case we get an error and specifically remember, it is a value error, we want to decide how
Python is going to handle this.
So all we wanted to do is ignore the error.
So we'll say pass.
And pass basically says ignore this and move on and it moves on to the next line and returns true.
So now let's flip back over and look at this in VS code.
So there is our new and improved remove edge method where we have our try and accept.
And I'll scroll up here.
And this is absolutely identical to what we saw before where we had the RD vertex.
And then we're going to come down here and try to remove the edge between A and D, even though D does
not have any edges with any other vertices.
So I'll run this.
And now you can see that the code will run.
Okay, so that is our method for remove edge.
