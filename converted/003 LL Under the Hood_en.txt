So now we're going to look at linked lists under the hood.
So we're going to start with our diagram like this.
And when we append an item, when we say this is equal to this and tail points to this and we add this
into the list, what is really going on to make that happen?
So to understand that, you have to understand first what the node is.
So first of all, the node is all of this.
It is not only the value, it is also the pointer.
Both of these together make up the node.
So still, what is it?
It's essentially a dictionary.
Where a value is four and next is equal to none.
So this isn't exactly exactly how this works.
You can't use the same syntax to access it, but you'll see it's very similar as we get to the end of
this video.
But you can think of it.
Like this.
So when you add this to the link list.
The seven node also.
Is a dictionary, but how do we have the seven node point to the four node?
We do it by just having the next value of that seven node be the four node.
And the same is true of the 23 node.
And the three node.
And the 11 note and that we have head pointing to it and then we have tail point to the last item.
So this is basically what's happening.
When you see this.
So let's flip it back to this and look at this in vs code.
So up here we have a variable named Head, and we just set it equal to this set of nested dictionaries.
So I have a line down here of code that is going to print out the number 23 right here.
So if you look at how we're going to have to traverse this, we're going to have to start at head and
then we're going to say next.
And then next again and then value.
And that's what we're going to do down here with this print statement.
Head.
Next.
Next value.
So I'm just going to run this and we get our number 23 here.
Now, if this was a length list and this code is not going to work right now, I'm going to come down
here to the bottom and I'm going to uncomment this.
If this is a link list, we would say print my link list, dot head, dot, next dot, next dot value.
And you would print out the number 23.
So the syntax is a little bit different than if you're going to use dictionaries.
But this idea that you're going to have these be in different places in memory, one points to the next.
The syntax is very similar.
You can think about it as a set of nested dictionaries and that is linked lists under the hood.
