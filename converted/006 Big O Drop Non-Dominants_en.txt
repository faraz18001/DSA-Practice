So our next simplification technique for Big O is called drop non-dominants.
So to explain this, I'm going to start with our nested for loop that we saw in the last video.
And I'm going to follow this with another separate loop.
So this is not inside of the nested for loops above.
This is a completely separate one.
So let's go take a look at this and VS Code.
Okay, so there is our function there, and we're going to call this with the number ten.
So I'm going to say run code.
So I'm going to start at the top here.
So this started at 00 and went to 99.
That's the nested for loop here.
Then the other for loop here.
This one printed out 0 through 9.
So let's flip back.
So these nested for loops ran O of n^2 times this, single for loop ran.
O of n times.
And the total number of items that we output was O of n^2 plus O of n so we could write it like
this O of n^2 plus n.
But the main thing we're concerned about within is what happens when we start having n be a very large
number.
Even if we have a not so large number, like 100 in squared is going to be 10,000 plus n that single
n that stands alone is only going to be 100.
So as a percentage of the total number of operations, it is insignificant.
And as the number becomes 1000 or a million that stand alone n is a very small portion of the number
of operations.
So in this equation, n^2 is the dominant term and that stand alone n is the non-dominant term.
So we just drop the n, we drop non-dominants.
