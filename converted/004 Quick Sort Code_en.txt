So now let's create our quicksort function.
So remember, Quicksort is going to use Pivot, which is going to create a pivot point and then make
the list look like this, then it's going to return the index of this item.
What the quicksort function is going to do is recursively run pivot again on this side and then run
it also on this side.
So let's put this back the way it was and will shrink it down.
And they will start writing our function, so we'll call it quicksort will pass that a list, and we
have to have the leftmost index and the rightmost index for quicksort, and that's going to be zero
and six to begin with that.
We're going to pass this.
So this next line of code, there's going to be quite a bit going on here.
OK, so first, this is a variable that stores the index that the pivot function returns.
So we're going to call this pivot index and we're going to set it equal to the pivot function and we're
going to pass it.
These three variables.
So remember, Pivot is going to do two things.
The first thing it does is going to rearrange everything in the list to look like this.
The second thing it does is it returns this index.
So in this case, we're going to assign that index to the variable pivot index.
Now, once we've done this, we need to recursively call quicksort on the left will do it like this.
We're going to pass at the same list, but with a different range is going to go from left, which was
zero up to pivot index minus one, which will be this range here.
And then we will also recursively call this on all the items on the right.
So it's the same list, my list, but his pivot index plus one all the way to the right index, which
was the index of six, which is this range here.
So let's bring this up and focus on this.
Let's focus on the left one first.
We will start with this, this one's less this one's greater will make this exchange, and this will
cause us to recursively call quicksort on the left and the right.
There's only one item left in each of these.
So we're going to stop calling quicksort and we know those are sorted.
Then we'll do this on the right.
Where this is our pivot point, this once greater, this one's less than these get switched that we
do this and then we recursively call quicksort.
On each side like this and everything is sorted.
So I'm going to shrink this down like this and bring our code back, the thing we haven't done here
is created our base case.
So these three lines only are run if left is less than right.
So if you look at left and right up here, we began with left being zero and right being six.
Left is less than right.
If we ever get to the point where left is greater than right or left is equal to right.
We want to stop running this code and that is our base case.
And then the only thing left to do is to return the list.
So we'll look at this code in a moment, but we'll start with a list that looks like this.
So let's flip over and take a look at this in code.
So there is our swap function and the swap function was used inside of the pivot function.
And we'll scroll up here.
And the pivot function was a helper function that we're using here inside of the quicksort function,
so we'll call quicksort down here with that list that we just looked at and the beginning index is going
to be zero in the ending index is going to be six.
So I'll run this.
And there we have our sorted list one through seven, so now that we have this code written, I'm going
to make a change because what we don't want to do is have to pass the beginning and ending index every
time that we call this.
So we're going to take this quicksort function and just rename it to Quicksort Underscore Helper.
And there are a couple of places that we're going to have to rename this inside the function here,
because this is where it gets called recursively.
So we'll change this to underscore helper.
And that we're going to change this to underscore helper.
And that's what I'm going to do, is paste in this function.
And you can see now we can just pass this the list.
Then we can come down here to where we call the function and we don't have to pass it, these two indexes,
we can just pass it the list.
And this line here will call the quicksort helper, it'll pass it my list, but it'll also figure out
what the first and last index is.
So this makes it where any one that is using this function can just call quicksort, pass it the list.
So I'm going to clear this output and then I'll run this again.
And you can see this is still returning one through seven, but the advantage being that we don't have
to pass this the beginning and end index when we run it.
And this is the version I'm going to include in the attached code where this section.
All right, so that is our function for quicksort.
