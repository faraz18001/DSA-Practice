So now let's build our hash table constructor.
Let's bring up our address space here.
So what are the points I want to make about a hash table is that you should always have a prime number
of addresses.
We've been doing this zero through seven, but I want to make the point that a better address scheme
would be to remove that last one and just use zero through six.
And the reason for that is a prime number increases the amount of randomness for how the key value pairs
are going to be distributed through the hash table.
So it reduces your collisions.
So now let's build the constructor.
We're going to say class hash table and the constructor.
The only thing it's going to do is build this list zero through six.
So we'll do that like this.
So the only argument that will pass this.
Is the size.
And if you haven't seen this before, where you set a parameter equal to something, this just becomes
the default if you don't pass it an argument.
So our default size is going to be seven.
Then we're going to call this list data map.
We set it equal to none.
And then times the size.
So it's going to create a list with seven items in it.
And all of those are just going to contain none.
So in addition to creating this constructor, I also want to create our hash method.
So I'm just going to bring in all of the code for that at once.
Like this.
Remember, the hash is what we pass the key to, to determine the address where we store that key value
pair.
So let's walk through how I created my hash method here.
We're going to have a variable, my hash.
We're going to initialize it to zero.
Then we'll loop through the letters in the key that we passed the hash method.
And when we do, we're going to run this calculation on it.
So as we read left or right, my hash equals my hash plus.
Award letter.
That's short for ordinal.
And what this does is it gets the ASCII number for each letter as we are looping through it.
So there's an ASCII numerical value for each letter.
And we're using that in this calculation.
We're going to multiply it by 23.
And the reason for that is 23 is a prime number.
You could plug any prime number in here.
And the real key to this is this modulo operator.
So if you haven't seen this before, modulo gives you the remainder when you divide.
So if you do modulo with the length, remember the length is seven.
So if you divide any number by seven, the remainder is going to be anywhere from 0 to 6 and 0 to 6
is exactly our address space.
And then after we get done calculating all of this, we are going to return the number and it's going
to be zero through six.
And that will be the address that we use to place the key value pair in the hash table.
So that is our hash method.
So let's go take a look at both of these and VTS code.
So that's where we create our hash table.
And there's our constructor, and this is our hash method that we just created.
And then here I've created a print table method just so we can print out the hash table.
So I'll create a hash table here called my hash table.
And that we will print out that hash table with this line down here.
So I will run this.
And those are our addresses.
They're zero through six, and each one of those contains none.
And that is our hash table constructor.
