So now the next thing we're going to look at is the call stack.
And I'm going to start out explaining the call stack with functions that are not recursive.
Then in the next video, we're going to look at how recursive functions go on the call stack.
And the reason for that is because it's a lot easier to understand what is happening on the call stack
first with non recursive functions.
So earlier in the course we looked at a data structure called a stack, and we use the analogy of it
being like a can of tennis balls.
That all applies here as well.
So whatever function is at the top of the call stack is the only one that can run.
Once that function is done running and you remove it, then the next function can run and when it is
complete, that will be removed and then the next function can be run.
Until that one is complete.
So let's take this frame here and move it over.
And we're going to use this for a call stack.
So let's say we have a simple function called function one, and all it does is print out a string that
says one function one when you call it will be put on the call stack.
It will print out that string.
And once it's done running, we'll remove this from the call stack.
So let's bring this back and look at something a little bit more complex.
Let's say that function one before it prints out this string.
Calls function to one function, one calls function to function.
Two gets pushed on to the call stack.
But let's say function two is going to call function three that will cause function three to get pushed
onto the call stack.
And then we'll say that function three doesn't call any other functions.
It's just going to print out the string.
Three.
So this gets printed out like this, and once it does, that function three is done running and we can
pop that from the call stack.
And now function two is at the top of the call stack.
Again, function two was waiting for function three to finish before it could go to the next line in
function two.
So now function two can print out the string two.
And once it does that, we can pop function two from the call stack.
And function one was waiting for function two to finish before it could run this line of code and print
out the string one.
And once that's done, function one can be popped from the call stack.
So notice that we call these functions and the order of one, two, three, but it printed out 3 to
1 because 3 to 1 is the order that these came off of the call stack.
So let's bring this code up here again.
And let's go look at this code in US code.
So there are the three functions there, and this is where we call function one to kick all of this
off.
And what we're going to do is we're going to come up here to this button here that says run and debug.
When I hover over this, I'm going to click on this.
It'll bring up this side window here.
And then over on this side, there are the three dots here that say additional views.
I'm going to click on this and I'm going to choose debug console.
Just like that.
And then in the middle here where it says function one next to the line number, you can see that I
get a red dot when I hover here, but when I click, that becomes a bright red dot that's going to create
a breakpoint.
And you can see that down here and you can see the line number 13 is where that breakpoint is.
So I'm going to.
Shrink this down.
And then up here we have variables.
I'm going to close that and watch.
I'm going to close that and we're just going to focus on call stack here.
Or it says run and debug up here.
Make sure it says Python current file.
If you pull down on this, there can be other things that you can choose.
Just make sure Python current file is chosen.
And next to that, we have the green play button.
I'm going to click on this.
You can see that function.
One where we created our breakpoint is highlighted.
That will be the next line of code that will be run.
And if you come up here to the top.
There's a downward pointing arrow here and it says step into this is what I'm going to use to step through
this code one line at a time, and then we can see how everything is going on in the call stack and
how it's going to print out.
So when I click on this, this will call function one and add it to the call stack.
So I'm going to click on it.
And you can see over here that function one is on the call stack, and now we're running the code in
function one.
The first thing function one does is call function two.
So I'm going to click on this.
And now function two has been added to the call stack.
And the first thing that function two does is it calls function three.
So I'll click on it again.
And now function three has been added to the call stack.
So you can see up here that print, the string three is highlighted.
So when I click on this button again, it's going to do two things.
It's going to print out the string three.
And then function three is going to be popped from the call stack over here.
So I'm going to click on this.
And function three has been popped from the call stack and three has been printed out.
Function two was waiting for function three to complete.
For it to move to the next line of code where it says print to.
And when this runs too, is going to be printed out to the console and function two will be popped from
the call stack like that.
Function.
One was waiting for function two to finish before it could move on to the next line and print out the
string one.
And when I click on this again, one will be printed out and function one will be port from the call
stack.
So I'll do that now.
And now we have three, two, one over here and our debug console and our call stack no longer has any
of those three functions.
All right.
And that is our overview of the call stack.
