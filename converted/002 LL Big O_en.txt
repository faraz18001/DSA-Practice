So in this video, we're going to talk about link lists, Big O, and I'm going to walk through every
method that we're going to create for a link list.
And what the big O for that method is going to be.
So I'm going to start by bringing up a link list.
We have our head and our tail.
And our first method is going to be to append a new node to the end of the list.
So in order to do this, we have to have the last node point to it.
Tale is going to point to it.
And now we add it into the list.
This is of one.
The reason being, it doesn't matter how many nodes we have in the list, the number of operations to
add it to the end is exactly the same.
But what about when we remove the item like this?
It would seem that all we have to do is have tail point to this node and we're done.
But when we are removing from the end of a link list, it's more complicated than that.
In order to have tail point to that last node, we have to have that pointer there.
Be set equal to something else that is pointing at that node.
Remember, these are all just pointers, so we have to set it equal to another pointer and the only
thing that points to the seven node.
Is this pointer.
So in order to get to that node, we have to start at the head.
Iterate through the list until we get to that pointer.
Then we can set tail equal.
To that pointer and that points it at the seven node.
But because we had to iterate through the entire list, this is o of n.
Now let's look at adding and removing items from the other end of the list.
So we're going to add an item to the front.
We need to have that 4.2, the 11 node, the head points to the 11.
So we'll have the next pointer from four be set equal.
To head and that points it at that node.
And that we have Head Point at the new node.
And that adds it into the list.
It doesn't matter how many items we have in the list, it's going to be the same number of operations
to add an item on the front of the list.
So that is o of one.
Now let's look at removing that four node.
The first thing we need to do is have head point at that 11 node.
We can do that by saying head is equal to head dot next, and that moves that over.
And then we remove that item from the link list.
Once again, this is going to be o of one because it doesn't matter how many items we have in the list,
it's the same number of operations to remove that.
Now let's look at adding an item somewhere in the middle of the list.
Let's say we're going to insert that for after the 23 node.
In order to find that node, we have to start at the head and iterate through the list until we get
to that 23 node.
Now we want the four to point at that seven node.
And this pointer here is pointing at the seven.
So we'll set the pointer from the four equal to that.
That points it there.
We have that 23 node point to the new node.
And that adds that into the link list.
But because we had to iterate through the list, this is o of n.
Now let's look at removing that for the same thing happens here.
We start at the head and we iterate through the list until we get to the four.
Like this.
Let's move this down here.
We want the 23 to point at that seven node.
So we're going to set the pointer from the 23 equal to the pointer that's going from the four to the
seven.
Like that.
Then we can remove the four.
From the linked list.
Once again, we had to iterate through the list.
This is a event.
So now let's look at lookup with a link list.
Let's say we're going to look for that number 23.
We have to start at the head and say, Is this 23?
It is not.
And keep going through until we find it.
Also with a link list.
If we're going to look at this by index and the 23 is that the index of two, you have to start at the
head and iterate through the indexes until you get to the index of two.
This is something that is different than Lis.
Because lis you can do this by index as o of one, but with the link list both looking it up by the
value or looking it up by index is o of n.
So let's move these out of the way.
I'm going to bring in a table here that compares linked lists with lists.
Now all the gray ones is the same either way, but.
There are a couple that are better for lists.
Popping an item off the end and looking up by index.
But with link lists.
If we add a remove from the beginning of the list, it's o of one versus o of n with a list.
So I will attach this chart as a PDF to the resources for this video, but that is the overview of length
lists.
They go.
