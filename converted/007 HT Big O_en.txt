Okay, so now let's look at hash table.
Big.
Oh.
I'm going to bring up a hash table like this.
I'm going to use link lists instead of the nested list that we've done so far.
And the only reason I'm doing it this way is it's visually easier to look at.
And I'll bring up our hash method here.
So since everything we do with the hash tables involves using this hash method, the first thing we
need to do is figure out the big o of the hash method itself.
So for a given key of a certain number of letters, it will always be the same number of operations
to calculate the hash.
That means that the hash method itself is oh of one.
So now let's look at setting an item.
We run it through our hash method.
And let's say that's going to be at the address of two.
We have pinned that onto our linked list like that, and appending that is also o of one.
Now let's look at get.
Will say get item screws.
That's going to give us the address of six.
It was o of one to find the address and then one operation to find screws.
But what if our hash table looks something more like this?
Now, when we say get item screws, it's o of one to find this address.
But then we need to iterate through the list until we get to screws.
So it would seem that the worst possible scenario would be that all of these items would be put at the
same address and we would have to iterate through all of them and it would be o of n.
But the assumption with a hash table is that the distribution is going to be more like this.
Even with the very primitive hash method that we created, it gave us a very good distribution of these
items.
The hash method that's built into Python is going to be even more efficient at distributing all of these
items.
And also you're going to be dealing with a much larger address space.
So collisions are going to be fairly rare.
So we treat hash tables which are implemented as dictionaries in Python as O of one, and it is of one
to place a key value pair or to look up something by key.
Either way it is o of one.
And that is our quick overview of hash table.
Big.
Oh.
