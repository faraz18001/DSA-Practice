So now let's take a look at the Big O of lists.
And since this is a built in data structure, it's very common to compare other data structures like
the ones we're going to build against lists.
So we're going to start with a list that has 11, 3, 23, 7 just random numbers, except I'm going to
represent them like this.
So we have the indexes as well because that's going to be important in talking about the big O of lists.
So let's look at a few things that you can do with a list.
I'm going to call this list, my list.
And if we're going to do an append, we'll append, the number 17 on here like this, this is a simple operation.
There isn't any re indexing that has to happen.
We don't have to do any re indexing of any of these items all the way down the list.
Now, let's take a look at taking that same item and removing it with a pop.
Once again, when we remove that, there is no re indexing all the way down the line.
All we have to do is add or remove when we do an append or a pop.
So that is o of one.
But if we take my list and say, Pop at the index of zero, that is that first item there.
When we remove this, the problem that we have is that this index is now incorrect.
So we need to take that index of one and re index it to a zero.
And we do that all the way down the line for the entire list.
The same is true if we're going to bring that item back and we're going to say we're going to insert
at the index of zero the value of 11, we're just going to bring that same one back.
In this case, we have to re index the two like this and the next one all the way down the line in order
to be able to put this one right here.
So it doesn't matter if you're removing or if you're adding to a list, it's O of n.
And n in this case is the number of items in the list.
So as far as Big O of list goes, the most important things to remember on this end, adding or removing
is O of one.
On this end removing because of the re indexing that has to happen and bringing it back, adding it
onto the list like that is O of n so O of one on one end and O of n on the other.
So what if we say my list and we insert something in the middle?
So this is at the index of one and we're going to add this one that says Hi.
You can see that right here.
This index is no longer correct.
So we're going to have to re index that and do that all the way down the list if we add something in
the middle.
Therefore it is.
O of n now you might say, Hey, that's half n, because if it's somewhere in the middle, you're
only going through half the items.
Well, there's two problems with that logic.
First, big O measures, worst case, not average case.
The second problem is that one half is a constant and we drop constants.
But either way this is O of n
Same is true.
If we remove the item at that index, we are going to have to do all of this re indexing and that is
going to be O of n.
So how about if we're going to look for an item and we're going to look for it by value, we're going
to look for the number seven.
We're going to start here and we're going to loop through iterate through this list until we get to
the seven that is going to be O of n.
However, if you're going to look at this by index and you want the value that's at the index of three,
you can go directly to that place in memory based on that index that is O of one.
And that is our overview of Big O of lists.
