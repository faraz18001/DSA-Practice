So now let's build our stack constructor.
So the nodes that we're going to use will be identical to link list nodes.
And the link list nodes look like this and the constructor look like this.
And we don't need to make any change here.
So now let's build out the stack class.
So we'll start our constructor like this.
We'll pass it of value so we can create the first node in the stack with that value.
Like that.
And in the link list we had head and tail set equal to the new node.
Like this.
Well, in a stack, you would have this be.
Top and bottom.
Except with a stack, because you're only adding and removing from the top.
You don't have to keep track of what's happening at the bottom so we can remove that.
And then we will also keep track of the height.
And now we have initialized our stack.
But visually, we'd want to point the arrow.
Down like that.
So let's go look at this and VTS code.
So there is our node class there.
And this creates the stack class here.
That's our constructor for the stack.
And that I've created this method called print stack.
This is just like what we saw with print list for singly linked lists and doubly link lists.
This is almost identical.
So we'll create a new stack here called My stack.
We'll pass it the number four.
And then down here, we will run my stacked print stack.
And that should print out the number four.
So let's run this.
And there is the number four.
All right.
So it looks like we have a working stack constructor.
