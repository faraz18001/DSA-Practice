So now we're going to write our contains method.
So for contains, we're just going to see if a tree contains a particular value.
So if we were looking for the number 27 that is in the tree, we would return true if we were looking
for the number 17 that is not in the tree, we would return false.
So just like we did for insert, I'm going to walk through all of the steps for the contains method
and then we will go through the code.
So the first thing we've done in all of our data structures to this point is to code for a situation
where that data structure is empty.
So we'll say if route equals none, we'll return false.
And we'll talk more about this scenario at the end of the video.
Plus bring our tree back like this.
So the next step is we'll need a variable that we'll use to traverse through the tree.
We'll call that temp.
So let's say we're looking for the number 27.
It's less than 47.
So we go left.
It's greater than 21.
So we go right.
And now it is equal to.
That means we've found the value.
So let's bring this up to the top here and actually create that variable.
We'll say temp equals self root.
So now let's look at what happens if we're looking for a number that is not in the tree, like the number
17.
We're going to go to the left.
17 is less than 21 left again.
It is less than 18.
We go left again.
If we ever get to a point where temp is equal to none, that means the number we're looking for is not
in the tree.
And it also means we should stop iterating through the tree.
So our while loop is going to say while temp is not none, we'll continue doing this while loop.
If we ever hit none, that will break us out of the while loop.
Inside the while loop.
We have three scenarios.
Either the number that we're looking for is less than ten up, in which case we're going to go left.
Or it's greater than we'll say else if it's greater than we'll go.
Right.
And then our third scenario is that it is equal to.
So whenever the value that we're looking for is equal to temp will return true, because that means
that value is in the tree.
If we ever hit none.
That means that number is not in the tree.
It'll break us out of our while loop and we will return.
False.
Okay, so those are all of our steps for the contains method.
Let's move those steps down to the bottom here and write the code.
So we'll say contains we'll pass it a value, the value that we're looking for.
And now let's start working through our list.
If root is equal to none, we're going to return false.
So that is this situation where we have an empty tree.
So we're going to say.
If root is none, we return false and we'll remove that from the list.
Next, we'll create our variable temp equals self root.
And that's exactly the way we would write the code.
So we can just move that up.
Then we'll create our while loop.
And this is actually the way we would write the code.
While temp is not none, we'll just move that up.
That inside of that while loop.
If it's less than we go left, we'll write that code like this.
So let's walk through this.
We're saying if value, the value that we're looking for is less than temp value, in this case, that's
47.
Let's say we're looking for 27.
That would be less than.
We would say temp equals temp left.
And that moves that down.
So let's remove this tree and we can remove that item from our list.
Then we'll say else.
If it is greater, we'll go right.
Like this.
This is saying if the value we're looking for, say that's the number 82, if it is greater than temp
value, in this case, 47, we're going to say temp equals temp.
Right.
And that moves temp down.
So let's remove that and then we can remove that item from our list.
And then finally, we're going to say else it must be equal and we're going to return true, and then
we'll just do this, because that is the only option that we have left if that item is in the tree.
So we'll remove that.
Then there is also the possibility that that item is not in the tree.
That will break us out of the while loop and then we will return.
False.
Now let's zoom in on this while loop and just walk through a couple of scenarios how this code would
run.
I'm going to bring a tree up here.
And for this first one, we're going to look for the number 27.
Going to say while temp is not none, which is to say while it's still pointing to a node, this will
run.
If value is less than tempt value and it is 27 is less than we're going to say temp equals temp left
and move this down.
Then we'll run the while loop again.
If it's greater than we're going to move.
Right.
And it is greater then.
And then we'll run the while loop again.
And this time.
That is the value we're looking for and we're going to return true.
Let's bring this up here and look for a scenario where we don't have that item in the tree.
We'll look for the number 17.
So we'll say while temp is not none.
We're going to go left.
Runs the wild loop again.
And we're going to go left again.
We run the while loop again.
And now it's less than again and temped out left equals none.
Now when we run the while, loop temp is equal to none.
It breaks this out of the while loop and we return false.
So let's drop this tree out of here and we'll bring in the rest of our code.
Now that we have all of this done, I want to circle back to these two lines of code.
And the reason is you don't actually need them in this code.
The reason I left these in here is while you're going through all of these steps, if you're writing
this out on a piece of paper, it's very common to say, okay, first thing I'm going to do is if the
tree is empty, I'm going to return false.
And if you put this into your code, everything works just fine.
If you look at different solutions for the contains method online, it's very common to see code that
has the equivalent of these two lines in there.
And you can see why whoever created that code went through the steps on a piece of paper.
They wrote this out, they put this in their code and it works.
So I'm going to remove this and we'll walk through a situation where we have an empty tree.
We're going to set temp equal to self root.
That's just going to make temp equal to none.
We move down to our while loop, which says while temp is not none, while temp is none.
So we're going to skip that.
And we're going to return false.
So that is the final version of our Code four contains.
So this is what we're going to look at in a moment in V's code.
We're going to build this tree.
And just like we've been doing throughout the video, we will first look for the number 27, and we
would expect that to return.
True.
And then we'll look for the number 17.
And we'll expect that to return false.
All right, so let's flip over to VS code.
K there is our contains method.
And then down here, this creates our tree and puts all of the items that we had in the diagram in there.
And then I'm just going to scroll this up.
And this is where we look for the number 27 that is in the tree.
You can see that right here.
And then down here we look for the number 17, which is not in the tree.
Okay, so I'm going to run this.
And you can see the first one is true.
And the second one is false.
All right.
And that is our method for contains.
